@use "backend" as *;
/* Begin Chat */
#{c(chat chat)},
#{c(chat chatLoadingWrapper)},
#{c(chat messageLoadingWrapper)},
#{c(chat chatContent)},
#{c(threads sidebar)} {
  background-color: transparent;
}
#{c(chat chatContent)} {
  &::before {
    content: none;
  }
}
#{c(chat chatContentInner)},
#{c(chat chatScrollerNSFW)},
#{c(chat noChat)}#{c(chat chatContent)} {
  background-color: $middle;
}

#{c(chat noChannel)} {
  @include bg;
  @include bg2;
  &::before {
    height: 48px;
    background-color: $header;
  }
  &::after {
    top: 48px;
    height: calc(100vh - 48px);
    background-color: $middle;
  }
}

#{c(chat mentioned)},
#{c(chat botMention)} {
  &::before {
    @include bg;
    background-color: var(--mention-background);
    opacity: var(--mention-opacity);
    transition: all ease-in-out;
    width: -webkit-fill-available;
    z-index: -1;
  }
}
#{c(chat mentioned)},
#{c(chat botMention)} {
  &:hover:before {
    opacity: calc( var(--mention-opacity) + 0.2 );
  }
}
#{c(chat botMessageBottom)} {
  color: #fff;
}

#{c(chat buttonWrapper)} {
  background: transparent;
  transform: skewX(-15deg);
  border: 1px solid $middle;
  #{c(chat button)} {
    &:hover {
      background-color: transparent;
    }
    @include bg;
    &::before {
      background-color: $primary;
      opacity: 0.6;
    }
    &:hover:before {
      background-color: $hover;
    }
    #{c(chat buttonIcon)} {
      transform: skewX(15deg);
    }
  }
}

#{c(main groupSpacing16)} {
  #{c(chat divider)} {
    --divider-color: var(--red-color);
    text-align: center;
    display: block;
    z-index: 0;
    &:not(#{c(chat dividerUnread)}) {
      border-top: none;
    }
    #{c(chat dividerContent)} {
      background-color: rgba(255,255,255,0.05);
      color: $primary;
      font-weight: normal;
      margin: 0 8px;
      padding: 2px 10px;
      // width: fit-content;
    }
    &#{c(chat dividerHasContent)} {
      margin: 0.5rem auto 1.5rem auto;
      border-top: none;
      #{c(chat unreadPill)} {
        top: 2px;
      }
    }
    // &#{c(chat dividerUnread)} {
    //   #{c(chat dividerContent)} {
    //     color: var(--text-normal);
    //     background-color: var(--divider-color);
    //     font-weight: 600;
    //   }
    // }
  }
}

#{c(chat newMessagesBar)} {
  background-color: $primary;
  box-shadow: none;
  opacity: 0.75;
  &:hover {
    opacity: 0.9;
  }
  &:active {
    padding-top: 0;
    opacity: 1;
  }
}

#{c(chat repliedMessage)} {
  &::before {
    border-color: $primary;
    filter: drop-shadow(2px 2px 2px $secondary);
  }
  #{c(chat replyBadge)} {
    background-color: $card;
  }
  // allows for spoiler hover
  #{c(chat repliedTextPreview)} #{c(chat repliedTextContent)} {
    pointer-events: unset;
  }
}

#{c(chat chatHeader)} {
  #{c(chat emptyChannelIcon)} {
    background-color: var(--card-background);
  }
  #{c(chat chatHeaderButton)},
  #{c(chat chatHeaderButton)}:hover {
    color: $primary;
  }
}
#{c(chat allowedRole)} {
  background-color: var(--card-background);
}

#{c(chat spoilerText)}#{c(chat spoilerHidden)}:hover {
  #{c(chat spoilerContent)} {
    opacity: 0.7;
    transition: opacity .5s .5s ease-in-out;
  }
}

#{c(chat messageContent)} {
  #{c(chat chatTimestamp)} {
    time {
      font-size: 0;
      &:before {
        content: "(" attr(aria-label) ")";
        text-transform: lowercase;
        font-size: 0.625rem;
      }
      #{c(chat chatEdited)} {
        display: none;
      }
    }
  }
}

#{c(main dark)} {
  #{c(chat spoilerText)} {
    &#{c(chat spoilerHidden)} {
      background-color: $card;
      &:hover {
        background-color: rgba(0,0,0,0.25);
      }
    }
  }
}

#{c(main light)} {
  #{c(chat spoilerText)} {
    &#{c(chat spoilerHidden)} {
      background-color: $card;
      &:hover {
        background-color: rgba(255,255,255,0.025);
      }
    }
  }
}

// who the hell uses those wave stickers?
#{c(chat compactContainer)},
#{c(chat compactButton)},
#{c(chat containerExpanded)} {
  display: none;
}

#{c(chat botTag)} {
  background-color: $primary;
}

#{c(chat gifFavoriteButton)} {
  #{c(chat gifFavoriteSelected)}#{c(chat gifFavoriteShowPulse)} #{c(chat gifFavoriteIcon)} {
    animation: gif-bouce .4s linear;
  }
  #{c(chat gifFavoriteSelected)}#{c(chat gifFavoriteShowPulse)}:after {
    animation: gif-ripple .45s ease;
  }
  &::after {
    border-color: $primary;
  }
  &:hover,
  &#{c(chat gifFavoriteSelected)} {
    color: $primary;
  }
}


#{c(chat zalgoBlocker)} #{c(chat messageContent)},
#{c(chat chatUsername)} {
  overflow: visible;
}

#{c(chat blockquoteContainer)} blockquote {
  background-color: $card;
  padding: 2px 8px 2px 12px;
}
#{c(chat blockquoteDivider)} {
  background-color: $primary;
}

#{c(chat reaction)} {
  margin-right: .125rem;
	margin-bottom: .125rem;
  border-radius: 3px;
  background-color: rgba(255,255,255,0.125);
  &:hover {
    background-color: rgba(255,255,255,0.125);
    border-color: $hover;
  }
  &:active {
    background-color: rgba(255,255,255,0.125);
    border-color: $primary;
  }
  &#{c(chat reactionMe)} {
    border-color: $secondary;
    background-color: transparent;
    #{c(chat reactionCount)} {
      color: $primary;
    }
  }
  #{c(chat reactionInner)} {
    padding: 0 5px;
  }
  #{c(chat reactionCount)} {
    color: var(--text-muted);
  }

  &#{c(chat reactionMe)} {
    #{c(chat reactionCount)},
    &:hover #{c(chat reactionCount)} {
      color: $primary;
      text-shadow: 2px 2px 3px;
    }
  }
}

#{c(chat welcomeCTA)} {
  display: none;
}

// Threads
#{c(chat chat)}#{c(chat threadSidebarOpen)} {
  border-radius: 0;
  #{c(header toolbar)} {
    right: 0;
  }
}
#{c(threads sidebar)} {
  border-radius: 0;
  margin-left: 0;
}
#{c(threads chat)} {
  background-color: $side;
  &:before {
    content: none;
  }
}
#{c(threads iconWrapper)} {
  background-color: $card;
}
#{c(threads channelTextAreaInnerFocused)} {
  border-color: transparent;
}
#{c(threads privateThreadFeaturePill)} {
  background-color: $card;
}
#{c(threads chatContainer)} {
  background-color: $card;
}
#{c(chat cozy)}#{c(threads chatHasThread)}:after,
#{c(threads spine)} {
  border-color: $primary;
  filter: drop-shadow(2px 2px 2px var(--secondary-color));
}
#{c(threads channelListSpine)} {
  color: $primary;
}